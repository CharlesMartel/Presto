<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Presto.Common</name>
    </assembly>
    <members>
        <member name="T:Presto.Common.Net.TCPClient">
            <summary>
            A MessageType based Asynchronous TCP Client to interact with a corresponding MessageType based asynchronous Presto TCP Server.
            Adapted from the MSDN example at http://msdn.microsoft.com/en-us/library/bew39x2a.aspx
            
            *Note The actual connection is left synchronous to avoid timing issues with the stream writes.
            </summary>
        </member>
        <member name="M:Presto.Common.Net.TCPClient.#ctor(System.String,System.Int32)">
            <summary>
            Create the TCP Client with the specified host and port.
            </summary>
            <param name="host">String representation of the host on the network.</param>
            <param name="port">The port to Connect to on the host.</param>
        </member>
        <member name="M:Presto.Common.Net.TCPClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Create the TCP Client with the specified host IPEndpoint.
            </summary>
            <param name="host">IPEndpoint of the host.</param>
        </member>
        <member name="M:Presto.Common.Net.TCPClient.Connect">
            <summary>
            Connect the Client to the given host server.
            </summary>
        </member>
        <member name="M:Presto.Common.Net.TCPClient.Write(Presto.Common.Net.MessageType,System.String)">
            <summary>
            Write data to the Socket stream according to the passed in Message Type and String message
            </summary>
            <param name="mType"></param>
            <param name="message"></param>
        </member>
        <member name="M:Presto.Common.Net.TCPClient.Write(Presto.Common.Net.MessageType,System.Byte[])">
            <summary>
            Write data to the Socket stream according to the passed in message type and byte data array
            </summary>
            <param name="mType"></param>
            <param name="data"></param>
        </member>
        <member name="M:Presto.Common.Net.TCPClient.write(System.Byte[])">
            <summary>
            Internal Write function. Writes the passed in data to the Socket stream.
            </summary>
            <param name="data">the byte data to be written</param>
        </member>
        <member name="M:Presto.Common.Net.TCPClient.writeCallback(System.IAsyncResult)">
            <summary>
            Internal asynchronous Write callback method
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Presto.Common.Net.TCPClient.dispatch(Presto.Common.Net.ClientState)">
            <summary>
            Dispatches the recieved message to the appropriate object 
            </summary>
            <param name="state">The state object to be dispatched.</param>
        </member>
        <member name="M:Presto.Common.Net.TCPClient.setDispatchAction(System.String,System.Action{Presto.Common.Net.ClientState})">
            <summary>
            Sets a dispatch action to the dispatch list and triggers that action according to the message type.
            </summary>
            <param name="messageType">The message type from the Presto.Common.Net.MessageType struct.</param>
            <param name="dispatchAction">An Action that recieves a server state object as its only parameter.</param>
        </member>
        <member name="M:Presto.Common.Net.TCPClient.close">
            <summary>
            Close the Client.
            </summary>
        </member>
        <member name="T:Presto.Common.Net.MessageType">
            <summary>
            A type safe enum holding all available message types.
            Message types are an 8 character ASCII string passed as an identifier to the recieving end of the tcp connection as to what
            to dispatch the request to. THe message type will be the first 8 characters of a message in ASCII. Consequently the message type
            is the first 8 bytes.
            </summary>
        </member>
        <member name="F:Presto.Common.Net.MessageType.UNKOWN">
            <summary>
            The given messange type was unknown or unparseable.
            </summary>
        </member>
        <member name="F:Presto.Common.Net.MessageType.ASSEMBLY_TRANSFER_MASTER">
            <summary>
            An assembly binary is attatched to this message and the binary needs to be loaded by the recieving PrestoServer
            </summary>
        </member>
        <member name="F:Presto.Common.Net.MessageType.ASSEMBLY_TRANSFER_SLAVE">
            <summary>
            An assembly binary is attatched to this message and the recieving slave server needs to load the binary and await instructions
            </summary>
        </member>
        <member name="F:Presto.Common.Net.MessageType.ASSEMBLY_TRANSFER_COMPLETE">
            <summary>
            A response notifying the sending service of a succesfull assembly transfer.
            </summary>
        </member>
        <member name="M:Presto.Common.Net.MessageType.#cctor">
            <summary>
            The static constructor for the MessageType enum.
            </summary>
        </member>
        <member name="M:Presto.Common.Net.MessageType.#ctor(System.String)">
            <summary>
            Internal constructor for the type safe enum MessageType
            </summary>
            <param name="myName">The name of the message type.</param>
        </member>
        <member name="M:Presto.Common.Net.MessageType.ToString">
            <summary>
            Get the name of the enumeration as a string.
            </summary>
            <returns>The string representation of the enumeration.</returns>
        </member>
        <member name="M:Presto.Common.Net.MessageType.op_Implicit(Presto.Common.Net.MessageType)~System.String">
            <summary>
            Implicit conversion from Message Type to String
            </summary>
            <param name="messageType"></param>
            <returns>The string representation of the MessageType</returns>
        </member>
        <member name="M:Presto.Common.Net.MessageType.op_Implicit(System.String)~Presto.Common.Net.MessageType">
            <summary>
            Implicitly convert from string to MessageType
            </summary>
            <param name="messageType"></param>
            <returns>Will return null if "messageType" matches no MessageType</returns>
        </member>
        <member name="T:Presto.Common.Machine.CPU">
            <summary>
            Offers details about the cpu a current presto intance is running on.
            </summary>
        </member>
        <member name="F:Presto.Common.Machine.CPU.cpuCounter">
            <summary>
            The performance counter that will deliver performance information on the cpu
            </summary>
        </member>
        <member name="M:Presto.Common.Machine.CPU.GetUsage">
            <summary>
            Get the total cpu usage percentage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Presto.Common.Machine.CPU.GetCPURating">
            <summary>
            Because all cpus are different, we cannot simply rely on percentage to decide use, so we generate a rating
            based on processor capability, this method returns that rating.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Presto.Common.Machine.CPU.GetDPI">
            <summary>
            The DPI (Distribution Performance Indicator) is number representing what the current machine has left to offer
            to the cluster. It is an absolute number based on the relative cpu rating that gives a standard value to base
            distribution decisions on. This method returns that value.
            </summary>
        </member>
        <member name="T:Presto.Common.AssemblyWrapper">
            <summary>
            The assembly wrapper provides basic functionality for loading, managing, and verifying assemblies.
            </summary>
        </member>
        <member name="M:Presto.Common.AssemblyWrapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Presto.Common.AssemblyWrapper"/> class.
            Initializes with an assembly URL which is the assemblys location on the file system.
            </summary>
            <param name="assemblyURL">
            The assembl's file system URL
            </param>
        </member>
        <member name="M:Presto.Common.AssemblyWrapper.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Presto.Common.AssemblyWrapper"/> class.
            Initializes with an assembly byte array. 
            </summary>
            <param name="assemblyBinaryArray">
            Assembly byte array.
            </param>
        </member>
        <member name="M:Presto.Common.AssemblyWrapper.GetAssembly">
            <summary>
            Gets the assembly.that this assembly wrapper wraps.
            </summary>
            <returns>
            The assembly.
            </returns>
        </member>
        <member name="M:Presto.Common.AssemblyWrapper.Validate">
            <summary>
            Validate that the assembly is usable by Presto..
            </summary>
        </member>
        <member name="T:Presto.Common.Net.TCPServer">
            <summary>
            An asynchronous TCP server. 
            Adapted from the MSDN example at  http://msdn.microsoft.com/en-us/library/fx6588te.aspx
            
            This server allows dispatching according to the included MessageTypes structure. By simply associating message types
            with Actions that recieve the ServerState Object as their only paramater, we can leave the dispatching internal to the 
            tcp server. The message types are the first 8 ASCII characters / First 8 bytes of the tcp transmission.
            
            The server is entirely asynchronous and all dispatched actions get thrown into the thread pool.
            </summary>
        </member>
        <member name="M:Presto.Common.Net.TCPServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Presto.Common.Net.TCPServer"/> class. 
            An asynchronous tcp Socket bound to the specified port.
            </summary>
            <param name="port">
            The port to bind to.
            </param>
        </member>
        <member name="M:Presto.Common.Net.TCPServer.Start">
            <summary>
            Start up the tcp server and begin accepting clients.
            </summary>
        </member>
        <member name="M:Presto.Common.Net.TCPServer.listen">
            <summary>
            Internal: starts up the listening loop
            </summary>
        </member>
        <member name="M:Presto.Common.Net.TCPServer.accept(System.IAsyncResult)">
            <summary>
            Internal: Connect to the Client and spin off a recieve callback
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Presto.Common.Net.TCPServer.read(System.IAsyncResult)">
            <summary>
            read data sent from the Client, called recursively until all data is receieved
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Presto.Common.Net.TCPServer.dispatch(Presto.Common.Net.ServerState)">
            <summary>
            Dispatches the recieved message to the appropriate object 
            </summary>
            <param name="state">The state object to be dispatched.</param>
        </member>
        <member name="M:Presto.Common.Net.TCPServer.RegisterDispatchAction(Presto.Common.Net.MessageType,System.Action{Presto.Common.Net.ServerState})">
            <summary>
            Sets a dispatch action to the dispatch list and triggers that action according to the message type.
            </summary>
            <param name="messageType">The message type from the Presto.Common.Net.MessageType struct.</param>
            <param name="dispatchAction">An Action that recieves a server state object as its only parameter.</param>
        </member>
        <member name="T:Presto.Common.Log">
            <summary>
            A common log for all program errors or debug statements to be written to
            </summary>
        </member>
        <member name="M:Presto.Common.Log.Error(System.String)">
            <summary>
            Log an Error.
            </summary>
            <param name='message'>
            The Error message to be logged.
            </param>
        </member>
        <member name="M:Presto.Common.Log.Warning(System.String)">
            <summary>
            Log a Warning.
            </summary>
            <param name='message'>
            The Warning message to be logged.
            </param>
        </member>
        <member name="M:Presto.Common.Log.Generic(System.String)">
            <summary>
            Log a Generic statement.
            </summary>
            <param name='message'>
            The Generic message to be logged.
            </param>
        </member>
        <member name="T:Presto.Common.Net.ClientState">
            <summary>
            ServerState is a state object that gets passed around as the holder for an asynchronous Socket.
            </summary>
        </member>
        <member name="M:Presto.Common.Net.ClientState.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Create a new server state object to manage a currently running connection
            </summary>
            <param name="Socket">The sync Socket associated with the state object.</param>
        </member>
        <member name="M:Presto.Common.Net.ClientState.PurgeBuffer(System.Int32)">
            <summary>
            Copies all remaining data in the Buffer into the full data array and clears the Buffer.
            </summary>
        </member>
        <member name="M:Presto.Common.Net.ClientState.GetMessageType">
            <summary>
            Extracts the message type from the message and returns it as a string. If the message is not long enough to
            contain a message type, null is returned. The message type is the first 8 characters of the message in ASCII so
            a check is simple.
            </summary>
            <returns>Will return the MessageType of the request, or null if the message type could not be parsed.</returns>
        </member>
        <member name="M:Presto.Common.Net.ClientState.IsFullyRecieved">
            <summary>
            When a message is fully recieved an internal boolean gets set to true. This is a way for outsiders to check on that
            internal property.
            </summary>
            <returns>boolean telling if the message has been fully recieved</returns>
        </member>
        <member name="M:Presto.Common.Net.ClientState.GetDataArray">
            <summary>
            Get the data portion of the message as a byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Presto.Common.Net.ClientState.GetDataASCIIString">
            <summary>
            Get the data portion of the message as an ASCII encoded string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Presto.Common.Net.ServerState">
            <summary>
            ServerState is a state object that gets passed around as the holder for an asynchronous Socket.
            </summary>
        </member>
        <member name="M:Presto.Common.Net.ServerState.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Create a new server state object to manage a currently running connection
            </summary>
            <param name="Socket">The sync Socket associated with the state object.</param>
        </member>
        <member name="M:Presto.Common.Net.ServerState.PurgeBuffer(System.Int32)">
            <summary>
            Copies all remaining data in the Buffer into the full data array and clears the Buffer.
            </summary>
        </member>
        <member name="M:Presto.Common.Net.ServerState.GetMessageType">
            <summary>
            Extracts the message type from the message and returns it as a string. If the message is not long enough to
            contain a message type, null is returned. The message type is the first 8 characters of the message in ASCII so
            a check is simple.
            </summary>
            <returns>Will return the MessageType of the request, or null if the message type could not be parsed.</returns>
        </member>
        <member name="M:Presto.Common.Net.ServerState.WriteAndClose(Presto.Common.Net.MessageType,System.Byte[])">
            <summary>
            Sends the passed in data as the passed in message type and closes the Socket.
            </summary>
            <param name="messageType"></param>
            <param name="data"></param>
        </member>
        <member name="M:Presto.Common.Net.ServerState.Write(Presto.Common.Net.MessageType,System.Byte[])">
            <summary>
            Sends the passed in data as the passed in message type
            </summary>
            <param name="messageType"></param>
            <param name="data"></param>
        </member>
        <member name="M:Presto.Common.Net.ServerState.write(System.Byte[])">
            <summary>
            Internal Write function. Writes the passed in data to the Socket stream.
            </summary>
            <param name="data">the byte data to be written</param>
        </member>
        <member name="M:Presto.Common.Net.ServerState.CloseSocket">
            <summary>
            Closes the ServerState's associated Socket
            </summary>
        </member>
        <member name="M:Presto.Common.Net.ServerState.IsFullyRecieved">
            <summary>
            When a message is fully recieved an internal boolean gets set to true. This is a way for outsiders to check on that
            internal property.
            </summary>
            <returns>boolean telling if the message has been fully recieved</returns>
        </member>
        <member name="M:Presto.Common.Net.ServerState.GetDataArray">
            <summary>
            Get the data portion of the message as a byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Presto.Common.Net.ServerState.GetDataASCIIString">
            <summary>
            Get the data portion of the message as an ASCII encoded string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Presto.Common.Machine.Memory">
            <summary>
            Offers details about the memory a current presto intance is running in.
            </summary>
        </member>
        <member name="F:Presto.Common.Machine.Memory.ramCounter">
            <summary>
            Internal counter for ram
            </summary>
        </member>
        <member name="M:Presto.Common.Machine.Memory.GetTotalMemory">
            <summary>
            Get the total size of the memory in the computer the Presto instance is running on.
            </summary>
            <returns>The total size of the memory.</returns>
        </member>
        <member name="M:Presto.Common.Machine.Memory.GetAvailableMemory">
            <summary>
            Get the size of the available memory in the computer the Presto instance is running on.
            </summary>
            <returns>The amount of available memory.</returns>
        </member>
    </members>
</doc>
